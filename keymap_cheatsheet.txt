Keymaps with Descriptions:

Mode: n
  <Esc> -> <Cmd>nohlsearch<CR>  [Description: Clear search highlights]
   freq -> nil  [Description: [F]requency search]
   Z -> nil  [Description: [Z] Search with Args]
   s/ -> nil  [Description: [S]earch [/] in Open Files]
   / -> nil  [Description: [/] Fuzzily search in current buffer]
   ghp -> nil  [Description: [G]ithub [P]ull Requests]
   ghr -> nil  [Description: [G]ithub [I]ssues]
   sn -> nil  [Description: [S]earch [N]eovim files]
   sa -> nil  [Description: [S]earch with [A]rgs (live grep)]
   cs -> nil  [Description: [C]hoose [S]cheme with preview]
     -> nil  [Description: [ ] Find existing buffers]
   s. -> nil  [Description: [S]earch Recent Files ("." for repeat)]
   sr -> nil  [Description: [S]earch [R]esume]
   sd -> nil  [Description: [S]earch [D]iagnostics]
   sg -> nil  [Description: [S]earch by [G]rep]
   sw -> nil  [Description: [S]earch current [W]ord]
   ss -> nil  [Description: [S]earch [S]elect Telescope]
   sf -> nil  [Description: [S]earch [F]iles]
   sk -> nil  [Description: [S]earch [K]eymaps]
   sh -> nil  [Description: [S]earch [H]elp]
   nd -> <Cmd>NoiceDismiss<CR>  [Description: Dismiss Noice Message]
   - -> nil  [Description: ADD DESCRIPTION]
   bp -> nil  [Description: [B]reakpoint [S]et]
   bt -> nil  [Description: [B]reakpoint [T]oggle]
   2 -> nil  [Description: harpoon to file 2]
   1 -> nil  [Description: harpoon to file 1]
   a -> nil  [Description: harpoon quick menu]
   A -> nil  [Description: harpoon file]
   5 -> nil  [Description: harpoon to file 5]
   4 -> nil  [Description: harpoon to file 4]
   3 -> nil  [Description: harpoon to file 3]
   fml -> nil  [Description: ADD DESCRIPTION]
   f -> nil  [Description: [F]ormat buffer]
   e -> nil  [Description: NeoTree reveal]
   cfj -> :s/{\s*/{\r    / | s/: /: \r    /g | s/, /,\r    /g | s/\s*}/\r}/<CR>  [Description: [C]ode [F]ormat JSON object]
   cfl -> :s/{\s*/{\r    / | s/, /,\r    /g | s/\s*}/\r}/<CR>  [Description: [C]ode [F]ormat Lua object]
   d -> "_dd  [Description: [D]elete into " register]
   ya -> gg"+yG  [Description: [Y]ank entire file into " register in normal mode]
   Y -> "+Y  [Description: [Y]ank entire line into " register in normal mode]
   y -> "+y  [Description: [Y]ank selected text into " register in normal mode]
   q -> nil  [Description: Open diagnostic [Q]uickfix list]
   ) -> ciw(<C-R>")  [Description: Replace word in parentheses [)]]
   ] -> ciw[<C-R>"]  [Description: Replace word in square brackets []]
   } -> ciw{<C-R>"}  [Description: Replace word in curly braces [}]]
   ' -> ciw'<C-R>"'  [Description: Replace word in single quotes [']]
   " -> ciw"<C-R>""  [Description: Replace word in quotes ["]
    i -> :e ~/.config/nvim/<CR>  [Description: Open [I]nit config]
   w -> :setlocal formatoptions-=cro<CR>:w<CR>  [Description: [W]rite without auto comment]
   r -> :%s/\<lt><C-R><C-W>\>/<C-R><C-W>/gI<Left><Left><Left>  [Description: [R]eplace word under cursor]
  % -> <Plug>(MatchitNormalForward)  [Description: ADD DESCRIPTION]
  & -> :&&<CR>  [Description: :help &-default]
  - -> <Cmd>Oil<CR>  [Description: Open parent directory]
  Y -> y$  [Description: :help Y-default]
  [% -> <Plug>(MatchitNormalMultiBackward)  [Description: ADD DESCRIPTION]
  [d -> nil  [Description: Jump to the previous diagnostic]
  ]% -> <Plug>(MatchitNormalMultiForward)  [Description: ADD DESCRIPTION]
  ]d -> nil  [Description: Jump to the next diagnostic]
  g% -> <Plug>(MatchitNormalBackward)  [Description: ADD DESCRIPTION]
  g] -> nil  [Description: Move to right "around"]
  g[ -> nil  [Description: Move to left "around"]
  gcc -> nil  [Description: Toggle comment line]
  gc -> nil  [Description: Toggle comment]
  gx -> nil  [Description: Opens filepath or URI under cursor with the system handler (file explorer, web browser, …)]
  shn -> nil  [Description: Highlight next surrounding]
  sFn -> nil  [Description: Find next left surrounding]
  sfn -> nil  [Description: Find next right surrounding]
  srn -> nil  [Description: Replace next surrounding]
  sdn -> nil  [Description: Delete next surrounding]
  shl -> nil  [Description: Highlight previous surrounding]
  sFl -> nil  [Description: Find previous left surrounding]
  sfl -> nil  [Description: Find previous right surrounding]
  srl -> nil  [Description: Replace previous surrounding]
  sdl -> nil  [Description: Delete previous surrounding]
  sn -> nil  [Description: Update `MiniSurround.config.n_lines`]
  sh -> nil  [Description: Highlight surrounding]
  sF -> nil  [Description: Find left surrounding]
  sf -> nil  [Description: Find right surrounding]
  sr -> nil  [Description: Replace surrounding]
  sd -> nil  [Description: Delete surrounding]
  sa -> nil  [Description: Add surrounding]
  zK -> nil  [Description: Peek Fold]
  zM -> nil  [Description: Close all folds]
  zR -> nil  [Description: Open all folds]
  <Plug>PlenaryTestFile -> :lua require('plenary.test_harness').test_file(vim.fn.expand("%:p"))<CR>  [Description: ADD DESCRIPTION]
  <Plug>(MatchitNormalMultiForward) -> :<C-U>call matchit#MultiMatch("W",  "n")<CR>  [Description: ADD DESCRIPTION]
  <Plug>(MatchitNormalMultiBackward) -> :<C-U>call matchit#MultiMatch("bW", "n")<CR>  [Description: ADD DESCRIPTION]
  <Plug>(MatchitNormalBackward) -> :<C-U>call matchit#Match_wrapper('',0,'n')<CR>  [Description: ADD DESCRIPTION]
  <Plug>(MatchitNormalForward) -> :<C-U>call matchit#Match_wrapper('',1,'n')<CR>  [Description: ADD DESCRIPTION]
  <F1> -> nil  [Description: [F1] Step Into]
  <F5> -> nil  [Description: [F5] Start/Continue]
  <F7> -> nil  [Description: [F7] See last session result]
  <F3> -> nil  [Description: [F3] Step Out]
  <F2> -> nil  [Description: [F2] Step Over]
  <C-K> -> <Cmd>NvimTmuxNavigateUp<CR>  [Description: ADD DESCRIPTION]
  <C-J> -> <Cmd>NvimTmuxNavigateDown<CR>  [Description: ADD DESCRIPTION]
  <C-H> -> <Cmd>NvimTmuxNavigateLeft<CR>  [Description: ADD DESCRIPTION]
  <Down> -> <Cmd>echo "Use j to move!!"<CR>  [Description: Discourage using [Down] arrow]
  <Up> -> <Cmd>echo "Use k to move!!"<CR>  [Description: Discourage using [Up] arrow]
  <Right> -> <Cmd>echo "Use l to move!!"<CR>  [Description: Discourage using [Right] arrow]
  <Left> -> <Cmd>echo "Use h to move!!"<CR>  [Description: Discourage using [Left] arrow]
  <C-Right> -> :vertical resize +2<CR>  [Description: Resize vertical split [Right]]
  <C-Left> -> :vertical resize -2<CR>  [Description: Resize vertical split [Left]]
  <C-S-Up> -> :resize -2<CR>  [Description: Resize horizontal split [Up]]
  <C-S-Down> -> :resize +2<CR>  [Description: Resize horizontal split [Down]]
  <C-W><C-D> -> <C-W>d  [Description: Show diagnostics under the cursor]
  <C-W>d -> nil  [Description: Show diagnostics under the cursor]
  <C-L> -> <Cmd>NvimTmuxNavigateRight<CR>  [Description: ADD DESCRIPTION]

Mode: v
   f -> nil  [Description: [F]ormat buffer]
   cfj -> :s/{\s*/{\r    / | s/: /: \r    /g | s/, /,\r    /g | s/\s*}/\r}/<CR>  [Description: [C]ode [F]ormat JSON object]
   cfl -> :s/{\s*/{\r    / | s/, /,\r    /g | s/\s*}/\r}/<CR>  [Description: [C]ode [F]ormat Lua object]
   d -> "_dd  [Description: [D]elete into " register]
   ya -> gg"+yG  [Description: [Y]ank entire file into " register in visual mode]
   y -> "+y  [Description: [Y]ank selected text into " register in visual mode]
   ) -> c(<C-R>")  [Description: Replace selection with parentheses [)]]
   ] -> c[<C-R>"]  [Description: Replace selection with square brackets []]
   } -> c{<C-R>"}  [Description: Replace selection with curly braces [}]]
   ' -> c'<C-R>"'  [Description: Replace selection with single quotes [']]
   " -> c"<C-R>""  [Description: Replace selection with quotes ["]
  # -> nil  [Description: :help v_#-default]
  % -> <Plug>(MatchitVisualForward)  [Description: ADD DESCRIPTION]
  * -> nil  [Description: :help v_star-default]
  // -> y/<C-R>"<CR>  [Description: Search for highlighted text in buffer]
  <lt> -> <lt>gv  [Description: Indent left and stay in indent mode]
  > -> >gv  [Description: Indent right and stay in indent mode]
  @ -> mode() ==# 'V' ? ':normal! @'.getcharstr().'<CR>' : '@'  [Description: :help v_@-default]
  J -> :m '>+1<CR>gv=gv  [Description: Move selected line [J]own]
  K -> :m '<lt>-2<CR>gv=gv  [Description: Move selected line [K]up]
  Q -> mode() ==# 'V' ? ':normal! @<C-R>=reg_recorded()<CR><CR>' : 'Q'  [Description: :help v_Q-default]
  [% -> <Plug>(MatchitVisualMultiBackward)  [Description: ADD DESCRIPTION]
  ]% -> <Plug>(MatchitVisualMultiForward)  [Description: ADD DESCRIPTION]
  a% -> <Plug>(MatchitVisualTextObject)  [Description: ADD DESCRIPTION]
  al -> nil  [Description: Around last textobject]
  an -> nil  [Description: Around next textobject]
  a -> nil  [Description: Around textobject]
  g% -> <Plug>(MatchitVisualBackward)  [Description: ADD DESCRIPTION]
  g] -> nil  [Description: Move to right "around"]
  g[ -> nil  [Description: Move to left "around"]
  gc -> nil  [Description: Toggle comment]
  gx -> nil  [Description: Opens filepath or URI under cursor with the system handler (file explorer, web browser, …)]
  il -> nil  [Description: Inside last textobject]
  in -> nil  [Description: Inside next textobject]
  i -> nil  [Description: Inside textobject]
  sa -> :<C-U>lua MiniSurround.add('visual')<CR>  [Description: Add surrounding to selection]
  <Plug>(MatchitVisualTextObject) -> <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)  [Description: ADD DESCRIPTION]
  <Plug>(MatchitVisualMultiForward) -> :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``  [Description: ADD DESCRIPTION]
  <Plug>(MatchitVisualMultiBackward) -> :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``  [Description: ADD DESCRIPTION]
  <Plug>(MatchitVisualBackward) -> :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``  [Description: ADD DESCRIPTION]
  <Plug>(MatchitVisualForward) -> :<C-U>call matchit#Match_wrapper('',1,'v')<CR>:if col("''") != col("$") | exe ":normal! m'" | endif<CR>gv``  [Description: ADD DESCRIPTION]

Mode: i
  <C-X> -> nil  [Description: Codeium Clear]
  <C-G> -> nil  [Description: Codeium Accept]
  <C-L> -> codeium#AcceptNextLine()  [Description: ADD DESCRIPTION]
  <C-K> -> codeium#AcceptNextWord()  [Description: ADD DESCRIPTION]
  <M-Bslash> -> <Plug>(codeium-complete)  [Description: ADD DESCRIPTION]
  <M-[> -> <Plug>(codeium-previous)  [Description: ADD DESCRIPTION]
  <M-]> -> <Plug>(codeium-next-or-complete)  [Description: ADD DESCRIPTION]
  <C-]> -> nil  [Description: Codeium Cycle Completions Next]
  <Plug>(codeium-complete) -> <Cmd>call codeium#Complete()<CR>  [Description: ADD DESCRIPTION]
  <Plug>(codeium-previous) -> <Cmd>call codeium#CycleCompletions(-1)<CR>  [Description: ADD DESCRIPTION]
  <Plug>(codeium-next-or-complete) -> <Cmd>call codeium#CycleOrComplete()<CR>  [Description: ADD DESCRIPTION]
  <Plug>(codeium-next) -> <Cmd>call codeium#CycleCompletions(1)<CR>  [Description: ADD DESCRIPTION]
  <Plug>(codeium-dismiss) -> <Cmd>call codeium#Clear()<CR>  [Description: ADD DESCRIPTION]
  <C-W> -> <C-G>u<C-W>  [Description: :help i_CTRL-W-default]
  <C-U> -> <C-G>u<C-U>  [Description: :help i_CTRL-U-default]
  <Tab> -> codeium#Accept()  [Description: ADD DESCRIPTION]

Mode: x
   f -> nil  [Description: [F]ormat buffer]
   cfj -> :s/{\s*/{\r    / | s/: /: \r    /g | s/, /,\r    /g | s/\s*}/\r}/<CR>  [Description: [C]ode [F]ormat JSON object]
   cfl -> :s/{\s*/{\r    / | s/, /,\r    /g | s/\s*}/\r}/<CR>  [Description: [C]ode [F]ormat Lua object]
   d -> "_dd  [Description: [D]elete into " register]
   ya -> gg"+yG  [Description: [Y]ank entire file into " register in visual mode]
   y -> "+y  [Description: [Y]ank selected text into " register in visual mode]
   ) -> c(<C-R>")  [Description: Replace selection with parentheses [)]]
   ] -> c[<C-R>"]  [Description: Replace selection with square brackets []]
   } -> c{<C-R>"}  [Description: Replace selection with curly braces [}]]
   ' -> c'<C-R>"'  [Description: Replace selection with single quotes [']]
   " -> c"<C-R>""  [Description: Replace selection with quotes ["]
  # -> nil  [Description: :help v_#-default]
  % -> <Plug>(MatchitVisualForward)  [Description: ADD DESCRIPTION]
  * -> nil  [Description: :help v_star-default]
  // -> y/<C-R>"<CR>  [Description: Search for highlighted text in buffer]
  <lt> -> <lt>gv  [Description: Indent left and stay in indent mode]
  > -> >gv  [Description: Indent right and stay in indent mode]
  @ -> mode() ==# 'V' ? ':normal! @'.getcharstr().'<CR>' : '@'  [Description: :help v_@-default]
  J -> :m '>+1<CR>gv=gv  [Description: Move selected line [J]own]
  K -> :m '<lt>-2<CR>gv=gv  [Description: Move selected line [K]up]
  Q -> mode() ==# 'V' ? ':normal! @<C-R>=reg_recorded()<CR><CR>' : 'Q'  [Description: :help v_Q-default]
  [% -> <Plug>(MatchitVisualMultiBackward)  [Description: ADD DESCRIPTION]
  ]% -> <Plug>(MatchitVisualMultiForward)  [Description: ADD DESCRIPTION]
  a% -> <Plug>(MatchitVisualTextObject)  [Description: ADD DESCRIPTION]
  al -> nil  [Description: Around last textobject]
  an -> nil  [Description: Around next textobject]
  a -> nil  [Description: Around textobject]
  g% -> <Plug>(MatchitVisualBackward)  [Description: ADD DESCRIPTION]
  g] -> nil  [Description: Move to right "around"]
  g[ -> nil  [Description: Move to left "around"]
  gc -> nil  [Description: Toggle comment]
  gx -> nil  [Description: Opens filepath or URI under cursor with the system handler (file explorer, web browser, …)]
  il -> nil  [Description: Inside last textobject]
  in -> nil  [Description: Inside next textobject]
  i -> nil  [Description: Inside textobject]
  sa -> :<C-U>lua MiniSurround.add('visual')<CR>  [Description: Add surrounding to selection]
  <Plug>(MatchitVisualTextObject) -> <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)  [Description: ADD DESCRIPTION]
  <Plug>(MatchitVisualMultiForward) -> :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``  [Description: ADD DESCRIPTION]
  <Plug>(MatchitVisualMultiBackward) -> :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``  [Description: ADD DESCRIPTION]
  <Plug>(MatchitVisualBackward) -> :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``  [Description: ADD DESCRIPTION]
  <Plug>(MatchitVisualForward) -> :<C-U>call matchit#Match_wrapper('',1,'v')<CR>:if col("''") != col("$") | exe ":normal! m'" | endif<CR>gv``  [Description: ADD DESCRIPTION]

Mode: c
  <Plug>(TelescopeFuzzyCommandSearch) -> <C-\>e "lua require('telescope.builtin').command_history { default_text = [=[" . escape(getcmdline(), '"') . "]=] }"<CR><CR>  [Description: ADD DESCRIPTION]

Mode: t
  <C-T> -> <C-\><C-N>  [Description: Exit terminal mode]

